Question:

Given an array of positive integers arr[], return the second largest element from the array. If the second largest element doesn't exist then return -1.

Note: The second largest element should not be equal to the largest element.

Examples:

Input: arr[] = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.
Input: arr[] = [10, 5, 10]
Output: 5
Explanation: The largest element of the array is 10 and the second largest element is 5.
Input: arr[] = [10, 10, 10]
Output: -1
Explanation: The largest element of the array is 10 and the second largest element does not exist.
Constraints:
2 â‰¤ arr.size() â‰¤ 105
1 â‰¤ arr[i] â‰¤ 105


My solution:

class Solution {
    public int getSecondLargest(int[] arr) {
        Arrays.sort(arr);
        int c=Integer.MAX_VALUE;
        int n=arr.length;
        int j=0;
        for(int i=n-1;i>=0;i--)
        {
            if(arr[i]<c)
            {
            c=arr[i];
            j++;
            }
            
            if(j==2)
            return c;
        }
        
        return -1;
    }
    
}

Time Complexity:
Sorting: 
O(nlogn)

Loop: 
O(n)

Total: 
O(nlogn)


Optimised Approach:

Alright, let me explain this super simple, like youâ€™re 5! Imagine you have a box of toy numbers, and you want to find the **biggest toy** and the **second biggest toy** without needing to organize the whole box (no sorting).

---

Alright, let me explain this super simple, like youâ€™re 5! Imagine you have a box of toy numbers, and you want to find the biggest toy and the second biggest toy without needing to organize the whole box (no sorting).

The Problem


We need to:

Find the biggest number (letâ€™s call it "Big Guy").
Then, find the second biggest number ("Runner-Up").
The Plan (Optimized Approach)
Hereâ€™s how weâ€™ll play:

Look at each toy (number) in the box one by one.
Keep two spots in your head:
One for the Biggest Toy (largest) youâ€™ve seen.
Another for the Second Biggest Toy (secondLargest).
As you check each toy:
If itâ€™s bigger than your Biggest Toy, move the Biggest Toy to the Runner-Up spot and update the Biggest Toy.
If itâ€™s smaller than the Biggest but bigger than the Runner-Up, update the Runner-Up.
At the end, your Runner-Up will hold the second biggest number!

The Code (Simple and Optimized):
Hereâ€™s the same logic in Java:


class Solution {
    public int getSecondLargest(int[] arr) {
        int largest = Integer.MIN_VALUE; // Think: this is the smallest toy ever
        int secondLargest = Integer.MIN_VALUE; // Same for Runner-Up

        for (int num : arr) {
            if (num > largest) { 
                secondLargest = largest; // Old biggest becomes Runner-Up
                largest = num; // Update Biggest Toy
            } else if (num > secondLargest && num != largest) {
                secondLargest = num; // Update Runner-Up only if it's smaller than the biggest
            }
        }

        return (secondLargest == Integer.MIN_VALUE) ? -1 : secondLargest; // If no Runner-Up exists, return -1
    }
}

Step-by-Step Example (Toys: [12, 35, 1, 10, 34, 1])
Start with:
largest = Integer.MIN_VALUE (Biggest Toy is empty),
secondLargest = Integer.MIN_VALUE (Runner-Up is also empty).

Go through each toy (number):

12: Biggest = 12, Runner-Up = empty.
35: Biggest = 35, Runner-Up = 12.
1: Nothing changes, too small.
10: Nothing changes, smaller than Runner-Up.
34: Biggest = 35, Runner-Up = 34 (because itâ€™s smaller than Biggest but bigger than the current Runner-Up).
1: Nothing changes, too small.
Result: Biggest = 35, Runner-Up = 34. ðŸŽ‰

Why This Is Better
No Sorting â€“ Sorting is like lining up all your toys from smallest to biggest, but here we only care about the top two.
Fast â€“ It checks the box just once (O(n))!
