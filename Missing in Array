You are given an array arr of size n - 1 that contains distinct integers in the range from 1 to n (inclusive). This array represents a permutation of the integers from 1 to n with one element missing. Your task is to identify and return the missing element.

Examples:
-----------

Input: arr[] = [1, 2, 3, 5]
Output: 4
Explanation: All the numbers from 1 to 5 are present except 4.
Input: arr[] = [8, 2, 4, 5, 3, 7, 1]
Output: 6
Explanation: All the numbers from 1 to 8 are present except 6.
Input: arr[] = [1]
Output: 2
Explanation: Only 1 is present so the missing element is 2.
Constraints:
1 ≤ arr.size() ≤ 106
1 ≤ arr[i] ≤ arr.size() + 1


APPROACH 1:
=============

To solve this problem of finding the missing number in an array, we can break it down as follows:

Given an array arr of size n-1 containing distinct integers in the range of 1 to n, the key observation is that:

The array represents a sequence of numbers from 1 to n with one number missing.
The sum of the first `n` natural numbers can be calculated using the formula:
   Sum(n) = n*(n+1)/2
By calculating the sum of the numbers in the array and subtracting it from Sum(n), we can find the missing number.

For example:
---------------

n = 5, arr[] = [1,2,3,5]
  The sum of numbers from 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.  
  The sum of the array is 1 + 2 + 3 + 5 = 11.  
  The missing number is 15 - 11 = 4.
n = 2, arr[] = [1]
  The sum of numbers from 1 to 2 is 1 + 2 = 3. 
  The sum of the array is 1.  
  The missing number is 3 - 1 = 2.
Given this, the missing number can be found by subtracting the sum of the array from the sum of the first n natural numbers.

Implementation:
----------------

class Solution {
    public int missingNumber(int n, vector<int> arr) {
        // Calculate the sum of the first n natural numbers
        int totalSum = n * (n + 1) / 2;
        
        // Calculate the sum of elements in the array
        int arrSum = 0;
        for (int num : arr) {
            arrSum += num;
        }
        // The missing number is the difference between the total sum and the array sum
        return totalSum - arrSum; 
    }
}

My Approach:
===============

class Solution {
    int missingNumber(int arr[]) {
        int n=arr.length+1;
        long s= (long) n*(n+1)/2; // Overflow of Integer in calculation
        for(int i:arr)
        s-=i;
        return (int) s;
    }
}

Time Complexity:
=================

O(n) → The loop iterates through arr once.

Space Complexity:
=================

O(1) → Only a few variables are used.


Approach 2:
==============


import java.util.HashSet;

class Solution {
    int missingNumber(int arr[]) {
        HashSet<Integer> set = new HashSet<>();
        for (int num : arr) {
            set.add(num);
        }
        for (int i = 1; i <= arr.length + 1; i++) {
            if (!set.contains(i)) {
                return i;
            }
        }
        return -1; // This line is redundant but ensures function always returns an int.
    }
}

Time Complexity:
=================

O(n) → Both insertions and lookups are 
O(1), making this efficient.

Space Complexity:
==================

O(n) → The HashSet stores all n-1 elements.

Approach 3:  (BEST APPROACH)
=============

Key XOR Properties
Self-canceling:
***************

x⊕x=0
Any number XORed with itself becomes 0.

Identity:
***********

x⊕0=x
Any number XORed with 0 remains unchanged.

Commutative and Associative:
******************************

a⊕b⊕c=c⊕b⊕a
The order of XOR operations does not matter.

Code Breakdown:
-----------------

class Solution {
    int missingNumber(int arr[]) {
        int xor = 0;  // Initialize XOR variable
        
        // Step 1: XOR all elements in the given array
        for (int e : arr) {
            xor = xor ^ e;
        }
        
        // Step 2: XOR all numbers from 1 to (n+1)
        for (int i = 1; i <= arr.length + 1; i++) {
            xor = xor ^ i;
        }
        
        // The missing number remains in xor
        return xor;
    }
}

Time Complexity:
==================

O(n) → Two passes over the array.
Space Complexity:
===================

O(1) → Only a single integer variable is used.
